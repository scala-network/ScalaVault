apply plugin: 'com.android.application'

android {
    defaultConfig {
        applicationId "io.scalaproject.vault"
        buildToolsVersion = '34.0.0'
        compileSdk 34
        minSdk 23
        //noinspection OldTargetApi
        targetSdk 33
        versionCode 16
        versionName "1.1.6"

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11"
                arguments '-DANDROID_STL=c++_shared'
            }
        }

        ndk {
            //noinspection ChromeOsAbiSupport
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'
        }
        resourceConfigurations += ['en', 'fr', 'de', 'el', 'eo', 'es', 'et', 'hu', 'it', 'ja', 'nb', 'nl', 'pt', 'pt-rBR', 'ro', 'ru', 'sk', 'sr', 'sv', 'uk', 'zh-rCN', 'zh-rTW']
        signingConfig signingConfigs.debug
        proguardFiles 'proguard-rules.pro'
    }

    flavorDimensions 'type', 'net'
    productFlavors {
        mainnet {
            dimension 'net'
        }
        stagenet {
            dimension 'net'
            applicationIdSuffix '.stage'
            versionNameSuffix ' (stage)'
        }
        alpha {
            dimension 'type'
            applicationIdSuffix '.alpha'
            versionNameSuffix ' (alpha)'
        }
        prod {
            dimension 'type'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        debug {
            applicationIdSuffix ".debug"
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk true
        }
    }

    // Map for the version code that gives each ABI a value.
    def abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, 'x86': 3, 'x86_64': 4]

    // Enumerate translated locales
    def availableLocales = ["en"]
    namespace 'io.scalaproject.vault'
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    dependenciesInfo {
        includeInApk false
        includeInBundle false
    }
    compileSdk 34
    ndkVersion '25.1.8937393'
    new File("app/src/main/res/").eachFileMatch(~/^values-.*/) { file ->
        def languageTag = file.name.substring(7).replace("-r", "-")
        availableLocales.add(languageTag)
    }

    // APKs for the same app that all have the same version information.
    android.applicationVariants.configureEach { variant ->
        // Update string resource: available_locales
        variant.resValue("string", "available_locales", availableLocales.join(","))
        // Assigns a different version code for each output APK.
        variant.outputs.configureEach {
            output ->
                def abiName = output.getFilter(com.android.build.OutputFile.ABI)
                output.versionCodeOverride = abiCodes.get(abiName, 0) + 10 * variant.versionCode
                //def flavor = output.getFilter(flavor)

                if (abiName == null) abiName = "universal"
                def v = "${variant.versionName}".replaceFirst(" '.*' ?", "")
                        .replace(".", "x")
                        .replace("(", "-")
                        .replace(")", "")
                outputFileName = "$rootProject.ext.apkName-" + v + "_" + abiName + ".apk"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << "--enable-preview"
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

dependencies {
    implementation 'com.google.android.material:material:1.12.0' // keep version 1.0.0 as it fixes a bug with Material Button
    implementation "com.android.support:support-v4"
    implementation "com.android.support:recyclerview-v7"
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

    implementation 'com.google.android.material:material:1.12.0'  // keep version 1.1.0 as it fixes a bug with Material Button
    implementation 'androidx.appcompat:appcompat:1.7.0'  // keep version 1.1.0 as it fixes a bug with Material Button
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation 'me.dm7.barcodescanner:zxing:1.9.8'

    //noinspection GradleDependency
    implementation 'com.squareup.okhttp3:okhttp:3.0.1' // keep version 3.0.1 to avoid errors
    implementation 'io.github.rburgst:okhttp-digest:3.1.1'
    implementation "com.jakewharton.timber:timber:5.0.1"

    implementation 'com.nulab-inc:zxcvbn:1.5.2'

    implementation 'dnsjava:dnsjava:2.1.9'
    implementation 'org.jitsi:dnssecjava:1.2.0'
    implementation 'org.slf4j:slf4j-nop:1.7.36'
    implementation 'com.github.brnunes:swipeablerecyclerview:1.0.2'

    implementation 'com.github.yalantis:ucrop:2.2.8'


    testImplementation "junit:junit:4.13.2"
    testImplementation "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:4.9.3"
    testImplementation 'org.json:json:20211205'
    testImplementation 'net.jodah:concurrentunit:0.4.6'

    def acraVersion = '5.7.0'
    implementation "ch.acra:acra-core:$acraVersion"
    implementation "ch.acra:acra-mail:$acraVersion"

    implementation 'com.unstoppabledomains:resolution:3.0.0'
    // implementation 'com.yubico.yubikit:core:(insert version here)' for Multi factor auth --> extra security layer

    // This is for the game or multiuser realtime interaction branch ... Title ???
    // ===============================================================
    // implementation 'com.github.heroiclabs.nakama-java:nakama-java:<commit>'
    // implementation 'com.github.heroiclabs.nakama-java:satori-java:<commit>'


    // or, depend on the fat Jar which bundles all of the Nakama Java dependencies into a single Jar.
    // implementation 'com.github.heroiclabs.nakama-java:nakama-java-all:<commit>'
    // implementation 'com.github.heroiclabs.nakama-java:satori-java-all:<commit>'
}
